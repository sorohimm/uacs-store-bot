package handler

import (
	"context"
	"fmt"
	tele "gopkg.in/telebot.v3"
	"io"
	"uacs_store_bot/pkg/log"
)

var (
	adminID int64 = 1380785175
)

func NewBotHandler(bot *tele.Bot) *BotHandler {
	return &BotHandler{
		bot,
	}
}

type BotHandler struct {
	*tele.Bot
}

var (
	textSubmitter          = &tele.ReplyMarkup{}
	mediaSubmitter         = &tele.ReplyMarkup{}
	btnUserSubmitWithText  = textSubmitter.Data("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "submit_text")
	btnUserSubmitWithMedia = mediaSubmitter.Data("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "submit_media")
)

func (o *BotHandler) Serve(ctx context.Context) {
	o.Handle(tele.OnMedia, o.handleMediaMessage(ctx))
	o.Handle(tele.OnText, o.handleTextMessage(ctx))
	o.Handle(&btnUserSubmitWithMedia, o.handleSubmitMedia(ctx))
	o.Handle(&btnUserSubmitWithText, o.handleSubmitText(ctx))
	o.Handle("/start", o.start())
}

func (o *BotHandler) start() tele.HandlerFunc {
	return func(c tele.Context) error {
		msg :=
			`–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞. 
–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.üôÇ`
		return c.Send(msg)
	}
}

func (o *BotHandler) handleTextMessage(ctx context.Context) tele.HandlerFunc {
	return func(c tele.Context) error {
		textSubmitter.Inline(
			textSubmitter.Row(btnUserSubmitWithText),
		)

		return c.Reply("–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", textSubmitter)
	}
}

func (o *BotHandler) handleMediaMessage(ctx context.Context) tele.HandlerFunc {
	return func(c tele.Context) error {
		mediaSubmitter.Inline(
			mediaSubmitter.Row(btnUserSubmitWithMedia),
		)

		return c.Reply("–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", mediaSubmitter)
	}
}

func (o *BotHandler) handleSubmitMedia(ctx context.Context) tele.HandlerFunc {
	logger := log.FromContext(ctx).Sugar()
	return func(c tele.Context) error {
		var (
			err       error
			recipient = &tele.User{ID: adminID}
		)

		if _, err = o.Send(recipient, "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!"); err != nil {
			return err
		}

		if c.Callback().Message.ReplyTo.Photo != nil {
			if err = o.SendPhoto(c); err != nil {
				logger.Error(err)
				return err
			}
		}

		if c.Callback().Message.ReplyTo.Video != nil {
			if err = o.SendVideo(c); err != nil {
				logger.Error(err)
				return err
			}
		}

		err = c.Send("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
		return err
	}
}

func (o *BotHandler) SendVideo(c tele.Context) error {
	var (
		reader    io.ReadCloser
		recipient = &tele.User{ID: adminID}
		err       error
	)

	if reader, err = o.File(c.Callback().Message.ReplyTo.Video.MediaFile()); err != nil {
		return err
	}
	vid := tele.Video{
		File:    tele.FromReader(reader),
		Caption: authorCaption(c),
	}

	if _, err = vid.Send(o.Bot, recipient, nil); err != nil {
		return err
	}

	return nil
}

func (o *BotHandler) SendPhoto(c tele.Context) error {
	var (
		reader    io.ReadCloser
		recipient = &tele.User{ID: adminID}
		err       error
	)

	if reader, err = o.File(c.Callback().Message.ReplyTo.Photo.MediaFile()); err != nil {
		return err
	}

	ph := tele.Photo{
		File:    tele.FromReader(reader),
		Caption: authorCaption(c),
	}

	if _, err = ph.Send(o.Bot, recipient, nil); err != nil {
		return err
	}

	return nil
}

func authorCaption(c tele.Context) string {
	return fmt.Sprintf("%s \n\n–ê–≤—Ç–æ—Ä: @%s", c.Callback().Message.ReplyTo.Caption, c.Callback().Message.ReplyTo.Sender.Username)
}

func (o *BotHandler) handleSubmitText(ctx context.Context) tele.HandlerFunc {
	return func(c tele.Context) error {
		_, err := o.Send(&tele.User{ID: adminID}, "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")

		completeText := fmt.Sprintf("%s \n\n–ê–≤—Ç–æ—Ä: @%s", c.Callback().Message.ReplyTo.Text, c.Callback().Message.ReplyTo.Sender.Username)
		_, err = o.Send(&tele.User{ID: adminID}, completeText)

		err = c.Send("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")

		return err
	}
}
